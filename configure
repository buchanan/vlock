#!/bin/sh

set -e

error() {
  echo >&2 "$0: error: $@"
}

fatal_error() {
  error "$@"
  exit 1
}

show_usage() {
cat <<EOT
Usage: $0 [OPTION]... [VAR=VALUE]...

This script creates necessary configuration files to build/install.

To assign environment variables (e.g., CC, CFLAGS...), specify them as
VAR=VALUE.  See below for descriptions of some of the useful variables.

Defaults for the options are specified in brackets.

Main options:
  -h, --help             display this help and exit
  --prefix=[path]        base path [/usr/local]
  --bindir=DIR           user executables [PREFIX/bin]
  --sbindir=DIR          system admin executables [PREFIX/sbin]
  --libdir=DIR           object code libraries [PREFIX/lib]
  --scriptdir=DIR        script type plugins [LIBDIR/vlock/scripts]
  --moduledir=DIR        module type plugins [LIBDIR/vlock/modules]
  --mandir=DIR           man documentation [PREFIX/share/man]

Optional Features:
  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)
  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
  --enable-plugins        enable plugin support [enabled]
  --enable-pam            enable PAM authentication [enabled]
  --enable-shadow         enable shadow authentication [disabled]
  --enable-root-password  enable unlogging with root password [enabled]

Some influential environment variables:
  CC          C compiler command
  CFLAGS      C compiler flags
  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a
              nonstandard directory <lib dir>
  CPPFLAGS    C/C++ preprocessor flags, e.g. -I<include dir> if you have
              headers in a nonstandard directory <include dir>
  CPP         C preprocessor

Use these variables to override the choices made by \`configure' or to help
it to find libraries and programs with nonstandard names/locations.

Report bugs to <frank-vlock@benkstein.net>.
EOT
}

enable_feature() {
  case "$1" in
    plugins)
      enable_plugins="$2"
    ;;
    root-password)
      enable_root_password="$2"
    ;;
    pam|shadow)
      if [ "$2" = "yes" ] ; then
        if [ -n "$auth_method" ] && [ "$auth_method" != "$1" ] ; then
          fatal_error "pam and shadow authentication are mutually exclusive"
        fi
        auth_method="$1"
      else
        fatal_error "cannot disable authentication"
      fi
    ;;
    *)
      fatal_error "invalid feature name: $1"
    ;;
  esac
}

parse_arguments() {
  while [ $# -gt 0 ] ; do
    opt=`expr "x$1" : 'x\([^=]*\)=.*' ||:`
    optarg=`expr "x$1" : 'x[^=]*=\(.*\)' ||:`
    case "$1" in
      --disable-*)
        feature=`expr "$1" : '--disable-\(.*\)'`
        enable_feature "$feature" no
        shift
      ;;
      --enable-*=no)
        feature=`expr "$1" : '--enable-\(.*\)=no'`
        enable_feature "$feature" no
        shift
      ;;
      --enable-*=yes)
        feature=`expr "$1" : '--enable-\(.*\)=yes'`
        enable_feature "$feature" yes
        shift
      ;;
      --enable-*)
        feature=`expr "$1" : '--enable-\(.*\)'`
        enable_feature "$feature" yes
        shift
      ;;
      --*=*)
        shift
        # unshift
        eval set -- "$opt" "$optarg" "$@"
      ;;
      --prefix)
        prefix="$2"
        shift 2 || fatal_error "$1 argument missing"
      ;;
      --bindir)
        bindir="$2"
        shift 2 || fatal_error "$1 argument missing"
      ;;
      --sbindir)
        sbindir="$2"
        shift 2 || fatal_error "$1 argument missing"
      ;;
      --libdir)
        libdir="$2"
        shift 2 || fatal_error "$1 argument missing"
      ;;
      --moduledir)
        moduledir="$2"
        shift 2 || fatal_error "$1 argument missing"
      ;;
      --scriptdir)
        scriptdir="$2"
        shift 2 || fatal_error "$1 argument missing"
      ;;
      --mandir)
        mandir="$2"
        shift 2 || fatal_error "$1 argument missing"
      ;;
      --help)
        show_usage
        exit
      ;;
      --*)
        error "unrecognized option: $1"
        echo >&2 "Try \`$0 --help' for more information."
        exit 1
      ;;
      *)
        fatal_error "invalid argument: $1"
      ;;
    esac
  done
}

parse_arguments "$@"

cat <<EOF
vlock configuration"

directories:
  prefix:     $PREFIX
  bindir:     $BINDIR
  sbindir:    $SBINDIR
  libdir:     $LIBDIR
  scriptdir:  $SCRIPTDIR
  moduledir:  $MODULEDIR

features:
  plugins:        $ENABLE_PLUGINS
  root-password:  $ENABLE_ROOT_PASSWORD
  auth-method:    $AUTH_METHOD
EOF
